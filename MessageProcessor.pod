=head1 NAME

PGP::GPG::MessageProcessor - supply object methods for interacting with GPG.

=head1 SYNOPSIS

  use PGP::GPG::MessageProcessor;

  $mp = new PGP::GPG::MessageProcessor;

  $mp->{encrypt} = $boolean;
  $mp->{sign} = $boolean;

  $mp->{recipients} = [ 'keyID', ... ];

  $mp->{passphrase} = $passphrase;
  $passphrase       = $mp->passphrasePrompt();
  $success          = $mp->passphraseTest( [$passphrase] );

  $success    = $mp->cipher( \@plaintext, [ \@ciphertext,
                                            [ \@stderr ] ] );

  $success    = $mp->verify( \@ciphertext, [ \@plaintext,
                                             [ \@stderr ] ] );

  $mp->{interactive} = $boolean;
  $mp->{armor}       = $boolean;
  $mp->{clearsign}   = $boolean
  $mp->{symmetric}   = $boolean;
  $mp->{secretKeyID} = $keyID;
  $mp->{extraArgs}   = [ '--foo' ];

  $mp = new PGP::GPG::MessageProcessor { encrypt => 1, symmetric => 1 }

Please note that brackets ( [ ] )'s around arguments to a function
indicate that the arguments are optional, not the creation of
an array reference.  However, a pair brackets around a list that a
data member of $mp is being set to does indicate that an array
reference is being used.  For example, the value I<$extraArgs> is set
to should be an array reference, while I<cipher()> gets between
1 and 3 arguents.

=head1 DESCRIPTION

The purpose of I<PGP::GPG::MessageProcessor> is to provide a simple,
object-oriented interface to GPG, the GNU Privacy Guard,
and any other implementation of PGP that uses
the same syntax and piping mechanisms.

Normal usage involves creating a new object via I<new()>, making some settings
such as I<$passphase>, I<$armor>, or I<$recipients>, and then committing these
with I<cipher()> or I<verify()>.

=head1 DATA MEMBERS

=over 2

=item B<$encrypt>

If true, the message will be encrypted.
Default is false.

=item B<$sign>

If true, the message will be signed.
Default is false.

=item B<$recipients>

A reference to an array of keyIDs GPG will encrypt to.
Default is null.

=item B<$passphrase>

GPG will use I<$passphrase> for signing and decrypting.
This does not have to be set if I<$interactive> is set.
Default is null.

=item B<$interactive>

I<PGP::GPG::MessageProcessor> will allow the user to interact directly with
GPG such as to enter passphrases.
This is desired for maximum security.
Default is true.

=item B<$armor>

If true, GPG will produce an armored output.
Default is false.

=item B<$clearsign>

If true, GPG will produce clear-signed messages.
Default is false.

=item B<conventional( [$boolean] )>

If true, GPG will only symmetrically (conventionally) encrypt.
This option is supposed to be used in addition to a true value
for I<$encrypt>.
If true, I<$recipients> must be null.
Default is false.

=item B<$secretKeyID>

The secret key GPG will use for signing and passphrase testing.
GPG will choose the default key if unset.
Default is null.

=item B<$comment>
This option fills defines what comment is put into the comment
field of messages.
Default is null; this will let GPG do what it likes.

=item B<$extraArgs>

A reference to an array of any other possible arguments
to be passed to GPG.

=back

=head1 METHODS

=over 2

=item B<new()>

Creates a new object.  One can pass in data members with
values using an anonymous hash.

=item B<passphrasePrompt()>

Prompts the user for a passphrase; uses 'stty sane -echo < /dev/tty'
for non-echoed input.  Sets I<$passphrase> to any input by the user.

=item B<passphraseTest( [$passphrase] )>

Uses a crude mechanism to check if I<$passphase> (already set
or passed as an argument) is valid for the secret
key currently selected.  Sets I<$passphrase> to any passed argument.

=item B<cipher( \@plaintext, [ \@ciphertext, [ \@stderr ] ] )>

Performs PGP encryption and/or signing over @plaintext.  This is a 
'committal' method.  If no
\@ciphertext is passed, @plaintext is replaced with the ciphertext.
Otherwise, @ciphertext contains GPG's result.  If \@stderr is passed,
GPG's stderr is captured into @stderr.  This is useful if you want to hide
everything GPG does from the user.

=item B<verify( \@ciphertext, [ \@plaintext, [ \@stderr ] ] )>

Performs PGP decryption and/or over @ciphertext.  This a 'committal' method.
If no \@plaintext is passed, @ciphertext is replaced with the plaintext.
Otherwise, @plaintext contains GPG's result.  If \@stderr is passed,
GPG's stderr is captured into @stderr.  This is useful if you want to hide
everything GPG does from the user.

=back

=head1 NOTES

Unless I<$interactive> is true, I<$passphrase> must be set, either
directly, or through
I<passphasePrompt()>, or I<passphraseTest()>.

Some settings have no effect in some situations.  For instance,
I<$encrypt> has no effect if I<verify()> is called.

=head1 SECURITY NOTES

Nothing fancy here for security such as memory-locking.

I<PGP::GPG::MessageProcessor> uses solely pipes to pass the message and
passphrase to GPG.

For maximum passphrase security, I<$interactive> should be true, forcing
the user to input the passphrase directly to GPG.

=head1 PROBLEMS/BUGS

Nothing fancy here for security such as memory-locking.

=head1 AUTHOR

Frank J. Tobin <ftobin@neverending.org>

fingerprint: 4F86 3BBB A816 6F0A 340F  6003 56FF D10A 260C 4FA3

=cut
